plugins {
  id 'com.github.rodm.teamcity-agent' version "1.0"
  id 'com.ullink.nuget' version '2.15'
}

teamcity {
  version = teamcityVersion
  agent {
    descriptor {
      pluginDeployment {
        useSeparateClassloader = true
      }

      files {
        into('tools') {
          from('tools')
        }
      }
    }
  }
}

dependencies {
  compile project(':plugin-dotnet-common')
  compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
  provided "org.jetbrains.teamcity.internal:agent:${teamcityVersion}"
  provided "org.jetbrains.teamcity:common-api:${teamcityVersion}"
  testCompile 'org.testng:testng:6.8'
  testCompile 'org.jmock:jmock:2.5.1'
}

project.tasks.nugetRestore.doFirst {
  println 'Clean .NET integration directories'
  ant.delete(dir: './packages')
  ant.delete(dir: './tools')
}

nugetRestore {
  packagesConfigFile = file('./../packages.config')
  packagesDirectory = './packages'
}

project.tasks.nugetRestore.doLast {
  def path = ant.path {
    dirset(dir: './packages', includes: 'TeamCity.Dotnet.Integration.*')
  }

  def nuGetPackageId = path.first().name

  println 'Use .NET integration package: ' + nuGetPackageId

  path = ant.path {
    dirset(dir: './packages', includes: 'TeamCity.Dotnet.Integration.*/build/_common/**')
    fileset(dir: './packages', includes: 'TeamCity.Dotnet.Integration.nuspec')
  }

  def contentPath = path.list().first()

  ant.move(todir: './tools/' + nuGetPackageId, overwrite: 'true', force: 'true') {
    fileset(dir: contentPath, includes: '**/*')
  }

  path = ant.path {
    fileset(dir: './tools/' + nuGetPackageId, includes: '**/*')
  }

  path.list().each { println it }
  ant.delete(dir: './packages')
}

agentPlugin.dependsOn(nugetRestore)

agentPlugin.version = null
agentPlugin.baseName = projectIds.artifact